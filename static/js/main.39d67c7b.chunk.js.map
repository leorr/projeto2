{"version":3,"sources":["utils/CsvUtils.js","App.js","reportWebVitals.js","index.js"],"names":["csvJSON","csvStr","lines","split","result","headers","i","length","obj","currentline","j","push","App","state","weathers","years","loading","error","a","this","count","year","axios","get","then","res","csvString","data","weather","map","value","filter","element","undefined","flatMap","parseFloat","setState","getData","concat","apply","console","log","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Line","type","stroke","fill","Tooltip","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAAaA,EAAU,SAACC,GAKpB,IAJA,IAAIC,EAAMD,EAAOE,MAAM,MACnBC,EAAS,GACTC,EAAQH,EAAM,GAAGC,MAAM,KAEnBG,EAAE,EAAEA,EAAEJ,EAAMK,OAAOD,IAAI,CAI3B,IAHA,IAAIE,EAAM,GACNC,EAAYP,EAAMI,GAAGH,MAAM,KAEvBO,EAAE,EAAEA,EAAEL,EAAQE,OAAOG,IACzBF,EAAIE,GAAKD,EAAYC,GAGzBN,EAAOO,KAAKH,GAGhB,OAAOJ,G,QCqGIQ,E,4MA7GbC,MAAQ,CACNC,SAAU,GACVC,MAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5CC,SAAS,EACTC,OAAO,G,oFAGT,WAAcF,GAAd,8BAAAG,EAAA,sDACMJ,EAAW,GACfK,KAAKN,MAAMG,SAAU,EACjBI,EAAQ,EAHd,cAIqBL,GAJrB,aAAAG,EAAA,kCAAAA,EAAA,6DAIaG,EAJb,0BAMYC,IAAMC,IAAN,+FAAkGF,EAAlG,qBAAmHA,EAAnH,WACLG,MAAK,SAAAC,GACJ,IAAMC,EAAYD,EAAIE,KAChBC,EAAU5B,EAAQ0B,GACvBG,KAAI,SAAAC,GAAK,OAAIA,EAAM,MACnBC,QAAO,SAAUC,GAAW,YAAmBC,IAAZD,KACnCE,SAAQ,SAAAJ,GAAK,sBAAQT,EAAOc,WAAWL,OACxChB,EAASH,KAAKiB,MAbtB,sDAgBM,EAAKQ,SAAS,CAAEnB,OAAO,IAhB7B,yBAkBMG,GACYL,EAAMR,SAChB,EAAKM,MAAMG,SAAU,EACrB,EAAKoB,SAAS,CAAEtB,cArBxB,kW,sFA2BA,WACEK,KAAKkB,QAAQlB,KAAKN,MAAME,S,oBAI1B,WACE,GAAII,KAAKN,MAAMG,QA8Db,OACE,0CA9DF,IAAMW,EAAO,GAAGW,OAAOC,MAAM,GAAGpB,KAAKN,MAAMC,UAE3C,OADA0B,QAAQC,IAAId,GAEV,0EAEE,eAACe,EAAA,EAAD,CACAC,MAAO,IACPC,OAAQ,IACRjB,KAAMA,EACNkB,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAJ/C,UAMA,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACAC,KAAK,WACLH,QAAQ,OACRI,OAAO,UACPC,KAAK,YAEL,cAACH,EAAA,EAAD,CACAC,KAAK,WACLH,QAAQ,OACRI,OAAO,UACPC,KAAK,YAEL,cAACH,EAAA,EAAD,CACAC,KAAK,WACLH,QAAQ,OACRI,OAAO,UACPC,KAAK,YAEL,cAACH,EAAA,EAAD,CACAC,KAAK,WACLH,QAAQ,OACRI,OAAO,UACPC,KAAK,YAEL,cAACH,EAAA,EAAD,CACAC,KAAK,WACLH,QAAQ,OACRI,OAAO,UACPC,KAAK,YAEL,cAACH,EAAA,EAAD,CACAC,KAAK,WACLH,QAAQ,OACRI,OAAO,UACPC,KAAK,YAEL,cAACH,EAAA,EAAD,CACAC,KAAK,WACLH,QAAQ,OACRI,OAAO,UACPC,KAAK,YAEL,cAACC,EAAA,EAAD,c,GAnGQC,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.39d67c7b.chunk.js","sourcesContent":["export const csvJSON = (csvStr) => {\n    var lines=csvStr.split(\"\\n\");\n    var result = [];\n    var headers=lines[0].split(\",\");\n  \n    for(var i=1;i<lines.length;i++){\n        var obj = {};\n        var currentline=lines[i].split(\",\");\n  \n        for(var j=0;j<headers.length;j++){\n            obj[j] = currentline[j];\n        }\n  \n        result.push(obj);\n  \n    }\n    return result;\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, AreaChart, Area } from 'recharts';\n\nimport { csvJSON } from './utils/CsvUtils'\n\nclass App extends Component {\n\n  state = {\n    weathers: [],\n    years: [2005, 2006, 2007, 2008, 2009, 2010, 2011],\n    loading: true,\n    error: false,\n  };\n\n  async getData(years) {\n    var weathers = [];\n    this.state.loading = true;\n    var count = 0;\n    for (const year of years) {\n      try {\n        await axios.get(`http://ladataverte.fr/api/1.0/data_points?id_indicators[]=10&type_place[]=world&from=${year}-01-01&to=${year}-12-31`)\n        .then(res => {\n          const csvString = res.data;\n          const weather = csvJSON(csvString)\n          .map(value => value[2])\n          .filter(function (element) { return element !== undefined; })\n          .flatMap(value => ({ [year]: parseFloat(value) }));\n          weathers.push(weather);\n        });\n      } catch (error) {\n        this.setState({ error: true });\n      } finally {\n        count++;\n        if(count >= years.length) {\n          this.state.loading = false;\n          this.setState({ weathers });\n        }\n      }\n    }\n  }\n  \n  componentDidMount() {\n    this.getData(this.state.years);\n    //plot data\n  }\n\n  render() {\n    if(!this.state.loading) {\n      const data = [].concat.apply([],this.state.weathers);\n      console.log(data);\n      return (\n        <div>\n          Dados da m√©dia de temperatura global\n          <LineChart\n          width={600}\n          height={400}\n          data={data}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Line\n          type='monotone'\n          dataKey='2005'\n          stroke='#8884d8'\n          fill='#8884d8'\n          />\n          <Line\n          type='monotone'\n          dataKey='2006'\n          stroke='#8884d8'\n          fill='#8884d8'\n          />\n          <Line\n          type='monotone'\n          dataKey='2007'\n          stroke='#8884d8'\n          fill='#8884d8'\n          />\n          <Line\n          type='monotone'\n          dataKey='2008'\n          stroke='#8884d8'\n          fill='#8884d8'\n          />\n          <Line\n          type='monotone'\n          dataKey='2009'\n          stroke='#8884d8'\n          fill='#8884d8'\n          />\n          <Line\n          type='monotone'\n          dataKey='2010'\n          stroke='#8884d8'\n          fill='#8884d8'\n          />\n          <Line\n          type='monotone'\n          dataKey='2011'\n          stroke='#8884d8'\n          fill='#8884d8'\n          />\n          <Tooltip />\n        </LineChart>\n        </div>\n      );\n    } else {\n      return (\n        <div>Loading</div>\n      )\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}