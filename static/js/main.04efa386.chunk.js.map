{"version":3,"sources":["utils/CsvUtils.js","App.js","reportWebVitals.js","index.js"],"names":["csvJSON","csvStr","lines","split","result","headers","i","length","obj","currentline","j","push","App","state","weathers","sumTemp","years","loading","error","a","this","count","year","axios","get","then","res","csvString","data","weather","map","value","filter","element","undefined","flatMap","parseFloat","reduce","b","setState","getData","arr","index","test","finalarr","concat","apply","href","LineChart","width","height","margin","top","right","left","bottom","tittle","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Line","type","stroke","fill","name","Tooltip","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04efa386.chunk.js","sourcesContent":["export const csvJSON = (csvStr) => {\n    var lines=csvStr.split(\"\\n\");\n    var result = [];\n    var headers=lines[0].split(\",\");\n  \n    for(var i=1;i<lines.length;i++){\n        var obj = {};\n        var currentline=lines[i].split(\",\");\n  \n        for(var j=0;j<headers.length;j++){\n            obj[j] = currentline[j];\n        }\n  \n        result.push(obj);\n  \n    }\n    return result;\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\n\nimport { csvJSON } from './utils/CsvUtils'\n\nclass App extends Component {\n\n  state = {\n    weathers: [],\n    sumTemp: [],\n    years: [2000, 2005, 2010],\n    loading: true,\n    error: false,\n  };\n\n  async getData(years) {\n    var weathers = [];\n    this.state.loading = true;\n    var count = 0;\n    for (const year of years) {\n      try {\n        await axios.get(`http://ladataverte.fr/api/1.0/data_points?id_indicators[]=10&type_place[]=world&from=${year}-01-01&to=${year}-12-31`)\n        .then(res => {\n          const csvString = res.data;\n          const weather = csvJSON(csvString)\n          .map(value => value[2])\n          .filter(function (element) { return element !== undefined; })\n          .flatMap(value => parseFloat(value));\n          this.state.sumTemp.push(weather.reduce((a, b) => a + b, 0))\n          weathers.push(weather.flatMap(value => ({ [year]: value })));\n        });\n      } catch (error) {\n        this.setState({ error: true });\n      } finally {\n        count++;\n        if(count >= years.length) {\n          this.state.loading = false;\n          this.setState({ weathers });\n        }\n      }\n    }\n  }\n  \n  componentDidMount() {\n    this.getData(this.state.years);\n  }\n\n  render() {\n    if(!this.state.loading) {\n      const data = this.state.weathers;\n      var arr = [];\n      for (let index = 0; index < 12; index++) {\n        const test = [\n          {'2000':data[0][index][2000],'2005':data[1][index][2005],'2010':data[2][index][2010]}\n        ];\n        arr.push(test);\n      }\n      var finalarr = [].concat.apply([], arr)\n      return (\n        <div>\n          Dados da média de temperatura global (Celsius) por ano, recuperados da api <a href=\"http://ladataverte.fr\">ladataverte</a>\n          <LineChart\n          width={600}\n          height={600}\n          data={finalarr}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n          tittle=\"\"\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Line\n          type='monotone'\n          dataKey='2000'\n          stroke='#8884d8'\n          fill='#8884d8'\n          name='2000'\n          />\n          <Line\n          type='monotone'\n          dataKey='2005'\n          stroke='#fff000'\n          fill='#fff000'\n          />\n          <Line\n          type='monotone'\n          dataKey='2010'\n          stroke='#ff0000'\n          fill='#ff0000'\n          />\n          <Tooltip />\n        </LineChart>\n        A soma das médias de temperatura por ano<br/> <br/>\n        2000: {this.state.sumTemp[0]} <br/>\n        2005: {this.state.sumTemp[1]} <br/>\n        2010: {this.state.sumTemp[2]} <br/>\n        </div>\n      );\n    } else {\n      return (\n        <div>Loading</div>\n      )\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}